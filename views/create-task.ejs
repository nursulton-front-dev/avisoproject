<!DOCTYPE html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="description"
      content="Aviso — платформа для создания заданий."
    />
    <meta name="keywords" content="задания, Aviso, создание" />
    <title>Создать задание — Aviso</title>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: "Inter", "Segoe UI", sans-serif;
        background: #f0f2f5;
        color: #1e293b;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        margin: 0;
      }
      header {
        background: #1e293b;
        padding: 1rem 2rem;
        color: #fff;
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      header h1 {
        font-size: 1.8rem;
        font-weight: 600;
      }
      nav a {
        color: #fff;
        text-decoration: none;
        margin-left: 1.5rem;
        font-weight: 500;
        transition: opacity 0.3s;
      }
      nav a:hover {
        opacity: 0.7;
      }
      .create-task-container {
        background: #fff;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        max-width: 600px;
        width: 90%;
        margin: 2rem auto;
        animation: fadeIn 0.5s ease-out;
        text-align: center;
        border-top: 4px solid #38bdf8;
      }
      .create-task-container h1 {
        color: #1e293b;
        font-weight: 600;
        margin-bottom: 1.5rem;
      }
      .form-group {
        margin-bottom: 1.2rem;
        text-align: left;
      }
      label {
        display: block;
        font-weight: 500;
        color: #1e293b;
        margin-bottom: 0.5rem;
      }
      input,
      textarea {
        width: 100%;
        padding: 0.8rem;
        border: 1px solid #d1d5db;
        border-radius: 8px;
        font-size: 1rem;
        background: #f9fafb;
        transition: border-color 0.3s;
      }
      input:focus,
      textarea:focus {
        outline: none;
        border-color: #38bdf8;
        box-shadow: 0 0 0 3px rgba(56, 189, 248, 0.1);
      }
      .btn {
        width: 100%;
        padding: 0.8rem;
        background: #4a63e7;
        color: #fff;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.3s, transform 0.2s;
      }
      .btn:hover {
        background: #3b4ec1;
        transform: translateY(-2px);
      }
      .btn:disabled {
        background: #a0a0a0;
        cursor: not-allowed;
      }
      .error {
        color: #ef4444;
        font-size: 0.9rem;
        margin-top: 0.5rem;
      }
      footer {
        background: #1e293b;
        color: #d1d5db;
        text-align: center;
        padding: 1rem;
        margin-top: auto;
      }
      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: scale(0.95);
        }
        to {
          opacity: 1;
          transform: scale(1);
        }
      }
      @media (max-width: 768px) {
        header {
          flex-direction: column;
          align-items: flex-start;
        }
        nav {
          margin-top: 1rem;
        }
        nav a {
          margin-left: 1rem;
        }
        .create-task-container {
          padding: 1.5rem;
          width: 95%;
        }
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Aviso</h1>
      <nav>
        <a href="/dashboard">Задания</a>
        <a href="/create-task">Создать задание</a>
        <a href="/login">Войти</a>
        <a href="/register">Регистрация</a>
      </nav>
    </header>
    <div class="create-task-container">
      <h1>Создать задание</h1>
      <form id="createTaskForm">
        <div class="form-group">
          <label for="name">Название задания</label>
          <input type="text" id="name" name="name" required />
        </div>
        <div class="form-group">
          <label for="description">Описание</label>
          <textarea id="description" name="description" rows="4"></textarea>
        </div>
        <div id="error" class="error"></div>
        <button class="btn" type="submit" id="submitBtn">Создать</button>
      </form>
    </div>
    <footer>
      <p>© 2025 Aviso. Все права защищены.</p>
    </footer>
    <script>
      const form = document.getElementById("createTaskForm");
      const errorDiv = document.getElementById("error");
      const submitBtn = document.getElementById("submitBtn");
      let isSubmitting = false;

      // Функция для извлечения токена из куки
      function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(";").shift();
        return "";
      }

      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        if (isSubmitting) {
          console.log("Form submission already in progress, ignoring...");
          return;
        }

        isSubmitting = true;
        submitBtn.disabled = true;
        errorDiv.textContent = "";

        const name = form.name.value.trim();
        const description = form.description.value.trim();
        const token = getCookie("token");

        // Логи для отладки
        console.log("Document cookie:", document.cookie);
        console.log("Extracted token:", token);

        if (!token) {
          console.error("No token found in cookies");
          errorDiv.textContent = "Токен не найден. Пожалуйста, войдите снова.";
          isSubmitting = false;
          submitBtn.disabled = false;
          return;
        }

        try {
          console.log("Sending create item request:", {
            name,
            description,
            token,
          });
          const response = await fetch("/api/items", {
            method: "POST",
            credentials: "include", // Убедимся, что куки отправляются автоматически
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({ name, description }),
          });

          const data = await response.json();

          console.log("Received response:", data);

          if (response.ok) {
            console.log("Item created successfully");
            alert("Задание создано!");
            form.reset(); // Очищаем форму
          } else {
            console.error("Create item failed:", data.error);
            errorDiv.textContent = data.error || "Ошибка создания задания";
          }
        } catch (err) {
          console.error("Network error:", err);
          errorDiv.textContent = "Ошибка сети: " + err.message;
        } finally {
          isSubmitting = false;
          submitBtn.disabled = false;
        }
      });
    </script>
  </body>
</html>
